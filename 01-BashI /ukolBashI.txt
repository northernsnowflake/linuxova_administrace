1. ⌨*
Co dělá příkaz ls -v?
	• A. Vypíše verzi programu ls    
	• B. Vypíše jméno aktuálního adresáře, ne jeho obsah      pwd
	• C. Seřadí soubory podle hodnot (víceciferných) čísel v názvech      ls -v
	• D. Vypíše obsah adresáře kompaktně – jednotlivá jména oddělí čárkou      ls -m
Bonus: Jaké přepínače mají ostatní efekty?

Odpověď: 1c
-v natural sort of (version) numbers within text 

2.
Začnu-li (jako uživatel mh) v adresáři /home/mh/data, které z těchto příkazů mě dostanou do /home/mh?
	• A. cd .   Zůstane ve stejném
	• B. cd / Jde do domácího adresáře 
	• C. cd /home/mh Správná odpověď 
	• D. cd ../.. jde do adresáře homecd 
	• E. cd ~ Správná odpověď
	• F. cd home  No such a file
	• G. cd ~/data/..No such a file
	• H. cd Správná odpověď
	• I. cd ..   Správná odpověď 
	• J. otevření nového terminálu Správná odpověď 
	
3.
Mám-li níže ukázané adresáře, a pwd vypisuje /home/mh/vec, co ukáže ls -F ../archiv?


	• A. ../archiv: Adresář nebo soubor neexistuje
	• B. 2012-12-01 2013-01-08 2013-01-27
	• C. 2012-12-01/ 2013-01-08/ 2013-01-27/
	• D. original pnas_final pnas_2
	• E. original/ pnas_final/ pnas_2/  Správná odpověď
	• 
4.
Vypadá-li disk jako v předchozím úkolu a pwd vypisuje /home/mh/archiv, které z těchto příkazů vypíšou pnas_2/ pnas_final/ original/?
	• A. ls pwd   No such a file 
	• B. ls -r -F   pnas_final/ pnas_2/ original/
	• C. ls -r -F /home/mh/archiv   pnas_final/ pnas_2/ original/
5. ⌨*
Zadej tenhle příkaz:
$ touch novy_soubor.txt
	1. Co tenhle příkaz udělal? (Nápověda: Použij ls) Vytvořil nový soubor s názvem novy_soubor.txt 
	2. Když se do aktuálního adresáře podíváš grafickým manažerem souborů, ukáže se ti novy_soubor.txt?  Ano
	3. Pusť ls -l. Zjistíš z výpisu, co nový soubor obsahuje?
Zjistím práva pro zápis,počet bajtů, kdy byl naposledy změněnos
	4. K čemu slouží příkaz touch? Vytvoření nového souboru
6.
Po tom, co pustíš následující příkazy, si uvědomíš, že soubory sucrose.dat a maltose.dat jsou špatně umístěné – měly by být v adresáři raw.
$ ls -F analyzed/ raw/$ ls -F analyzedfructose.dat glucose.dat maltose.dat sucrose.dat$ cdanalyzed
Doplň příkaz, který je tam přesune.
$ mv sucrose.dat maltose.dat __..__/__raw__


7.
Vytvořila sis soubor statsitika.txt, ve kterém máš nějaké výpočty. Ale ve jméně je překlep! Které z těchto příkazů to spraví? B je správně.
	• A. cp statsitika.txt statistika.txt    vytvoří druhý soubor statistika.txt
	• B. mv statsitika.txt statistika.txt    přepíše chybný soubor novým statistika.txt 
	• C. cp statsitika.txt .   statsitika.txt and statsitika.txt are same name 
	• D. mv statsitika.txt .   statsitika.txt and statsitika.txt are same name
8.
Co vypíše ls na konci této sekvence příkazů?
$ pwd/home/jamie/data$ lsproteiny.dat$ mkdir rekombinace$ mv proteiny.dat rekombinace$ cp rekombinace/proteiny.dat ../proteiny2.dat$ ls
	• A. proteiny2.dat rekombinace
	• B. rekombinace   správná odpověď
	• C. proteiny.dat rekombinace
	• D. proteiny2.dat
9.
Sam má následující soubory:
.├── 2015-10-23-calibration.txt├── 2015-10-23-dataset1.txt├── 2015-10-23-dataset2.txt├── 2015-10-23-dataset_overview.txt├── 2015-10-26-calibration.txt├── 2015-10-26-dataset1.txt├── 2015-10-26-dataset2.txt├── 2015-10-26-dataset_overview.txt├── 2015-11-23-calibration.txt├── 2015-11-23-dataset1.txt├── 2015-11-23-dataset2.txt├── 2015-11-23-dataset_overview.txt├── backup│   ├── calibration│   └── datasets└── send_to_bob    ├── all_datasets_created_on_a_23rd    └── all_november_files
Doplň následující příkazy...
$ cp *dataset* backup/datasets$ cp ____calibration____ backup/calibration  cp *calibration* backup/calibration$ cp 2015-____-____ send_to_bob/all_november_files/ cp 2015-11-* send_to_bob/all_november_files/$ cp ____ send_to_bob/all_datasets_created_on_a_23rd/
  	cp 2015-??-23-* send_to_bob/all_datasets_created_on_a_23rd/
... aby výsledek vypadal takhle:
.├── 2015-10-23-calibration.txt├── 2015-10-23-dataset1.txt├── 2015-10-23-dataset2.txt├── 2015-10-23-dataset_overview.txt├── 2015-10-26-calibration.txt├── 2015-10-26-dataset1.txt├── 2015-10-26-dataset2.txt├── 2015-10-26-dataset_overview.txt├── 2015-11-23-calibration.txt├── 2015-11-23-dataset1.txt├── 2015-11-23-dataset2.txt├── 2015-11-23-dataset_overview.txt├── backup│   ├── calibration│   │   ├── 2015-10-23-calibration.txt│   │   ├── 2015-10-26-calibration.txt│   │   └── 2015-11-23-calibration.txt│   └── datasets│       ├── 2015-10-23-dataset1.txt│       ├── 2015-10-23-dataset2.txt│       ├── 2015-10-23-dataset_overview.txt│       ├── 2015-10-26-dataset1.txt│       ├── 2015-10-26-dataset2.txt│       ├── 2015-10-26-dataset_overview.txt│       ├── 2015-11-23-dataset1.txt│       ├── 2015-11-23-dataset2.txt│       └── 2015-11-23-dataset_overview.txt└── send_to_bob    ├── all_datasets_created_on_a_23rd    │   ├── 2015-10-23-dataset1.txt    │   ├── 2015-10-23-dataset2.txt    │   ├── 2015-10-23-dataset_overview.txt    │   ├── 2015-11-23-dataset1.txt    │   ├── 2015-11-23-dataset2.txt    │   └── 2015-11-23-dataset_overview.txt    └── all_november_files        ├── 2015-11-23-calibration.txt        ├── 2015-11-23-dataset1.txt        ├── 2015-11-23-dataset2.txt        └── 2015-11-23-dataset_overview.txt
10.
Máš následující soubory:
$ ls -Fanalyzed/  fructose.dat    raw/   sucrose.dat
Zkus napsat co nejkratší příkaz, kterým přesuneš fructose.dat a sucrose.dat do adresáře analyzed/.

odpověď mv *t a*

11.
Které z následujících sad příkazů vytvoří tuhle strukturu adresářů?
2016-05-20/└── data    ├── processed    └── raw

správně - A, B a D
A.
$ mkdir 2016-05-20$ mkdir 2016-05-20/data$ mkdir 2016-05-20/data/processed$ mkdir 2016-05-20/data/raw
B.
$ mkdir 2016-05-20$ cd2016-05-20$ mkdir data$ cd data$ mkdir raw processed
C.
$ mkdir 2016-05-20/data/raw$ mkdir 2016-05-20/data/processed
D.
$ mkdir -p 2016-05-20/data/raw$ mkdir -p 2016-05-20/data/processed
E.
$ mkdir 2016-05-20$ cd2016-05-20$ mkdir data$ mkdir raw processed
